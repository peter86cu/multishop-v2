package com.online.multishop.controller;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.UUID;import java.util.logging.Level;import java.util.logging.Logger;import javax.servlet.http.HttpServletResponse;import com.online.multishop.service.ParametrosService;import com.online.multishop.service.ShoppingUsuariosService;import com.online.multishop.service.ValidarPagoService;import com.online.multishop.vo.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.client.RestClientException;import org.springframework.web.client.RestTemplate;import com.ayalait.response.ResponseRegistrarUserShop;import com.ayalait.response.ResponseResultado;import com.ayalait.utils.Email;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.ObjectWriter;import com.google.gson.Gson;import com.multishop.modelo.*;import com.multishop.response.*;@RestControllerpublic class LoginController {	@Autowired	RestTemplate template;	@Autowired	ShoppingUsuariosService service;	@Autowired	ParametrosService servicePara;	@Autowired	ValidarPagoService servicePagos;			ObjectWriter ow = (new ObjectMapper()).writer().withDefaultPrettyPrinter();/** * * datos.append("cartIDSession", sessionStorage.getItem("cartIDSession")); *         datos.append("nameUser", sessionStorage.getItem("nameUser")); *         datos.append("userId", sessionStorage.getItem("userId")); * @throws InvocationTargetException  * * */	@PostMapping(value = { "login" }, produces = { "application/json" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET, RequestMethod.POST })	@ResponseStatus(HttpStatus.CREATED)	public void login(@RequestParam("mail") String mail, @RequestParam("password") String pwd,					 Model modelo, HttpServletResponse responseHttp) throws IOException, InvocationTargetException {		ResponseResultado response = new ResponseResultado();		Logger.getLogger(LoginController.class.getName()).log(Level.SEVERE, (String) mail+pwd, "Login");		//if (InicioController.session.getToken() == null) {			response = service.obtenerToken(mail, pwd);			Logger.getLogger(LoginController.class.getName()).log(Level.SEVERE,  ow.writeValueAsString(response));			if (response.isStatus()) {				InicioController.session.setToken(response.getResultado());				ResponseUsuarioShopping usuarioLogin = service.obtenerDatosUsuarioLogin(response.getResultado(), mail);				if (usuarioLogin.isStatus()) {					InicioController.session.setCode(200);					String nameMayuscula=usuarioLogin.getUser().getName().toUpperCase();					usuarioLogin.getUser().setName(nameMayuscula);					ResponseDirecciones direccion= service.recuperarDreccionUsuarioPorId(usuarioLogin.getUser().getId(),InicioController.session.getToken());					if(direccion.isStatus()) {						InicioController.session.setDirecciones(new ArrayList<DireccionUsuario>());						InicioController.session.setDirecciones(direccion.getDirecciones() );					}					//busco los datos del carrito si tiene pendiente					ResponseCartUsuario lstResponseCart = servicePara.obtenerCarritoPorUsuario(usuarioLogin.getUser().getId());					if (lstResponseCart.isStatus()) {						InicioController.session.setCode(200);						for (CarritoDetalle responseCart : lstResponseCart.getCartDetalle()) {							//ResponseHistoryEstadoCart state = servicePara.obtenerEstadoCarrito(responseCart.getCart().getIdhistestado());							//if (state.isStatus()) {								//if (state.getEstado().getIdestado() == 6) {									InicioController.session.responseResultado.setCarrito(responseCart);									InicioController.session.setCardId(responseCart.getCart().getIdcart());									//break;								//}							//}						}												if(InicioController.carrito!=null) {							if(InicioController.carrito.getDatosCart()!=null) {								ShoppingCart cart= new ShoppingCart();								cart.setFechacompra(InicioController.session.responseResultado.getCarrito().getCart().getFechacompra());								cart.setFechaentrega(InicioController.session.responseResultado.getCarrito().getCart().getFechaentrega());								cart.setIdcart(InicioController.session.responseResultado.getCarrito().getCart().getIdcart());								cart.setIdhistestado(InicioController.session.responseResultado.getCarrito().getCart().getIdhistestado());								cart.setIdusuario(InicioController.session.responseResultado.getCarrito().getCart().getIdusuario());								cart.setTotalapagar(InicioController.session.responseResultado.getCarrito().getCart().getTotalapagar()+InicioController.carrito.getDatosCart().getCartDetalle().getCart().getTotalapagar());																InicioController.session.responseResultado.getCarrito().setCart(cart);																InicioController.requestCart.setCart(cart);								List<ShoppingCartDetail> detalle= new ArrayList<ShoppingCartDetail>();								for (ShoppingCartDetailTemp iterable_element : InicioController.carrito.getDatosCart().getCartDetalle().getDetalle()) {									ShoppingCartDetail det= new ShoppingCartDetail();									det.setCantidad(iterable_element.getCantidad());									det.setId(iterable_element.getId());									det.setIdcart(cart.getIdcart());									det.setIdproducto(iterable_element.getIdproducto());									det.setPrecio(iterable_element.getPrecio());									detalle.add(det);									InicioController.session.responseResultado.getCarrito().getDetalle().add(iterable_element);								}																InicioController.requestCart.setDetalle(detalle);								ResponseResultado responseNew = servicePara.guardarCarrito(InicioController.requestCart);								if(responseNew.isStatus()) {																	}							}						}												}					InicioController.session.setUser(usuarioLogin.getUser());					usuarioLogin.setResultado(InicioController.session.getToken());					String json = new Gson().toJson(InicioController.session);					responseHttp.setContentType("application/json");					responseHttp.setCharacterEncoding("UTF-8");					responseHttp.getWriter().write(json);				} else {					InicioController.session.setCode(201);					String json = new Gson().toJson(usuarioLogin);					responseHttp.setContentType("application/json");					responseHttp.setCharacterEncoding("UTF-8");					responseHttp.getWriter().write(json);				}			} else {				//response.setResultado("El recurso requerido no est√° disponible.");				String json = new Gson().toJson(response);				responseHttp.setContentType("application/json");				responseHttp.setCharacterEncoding("UTF-8");				responseHttp.getWriter().write(json);			}		/*} else {			InicioController.session = new Session();			response.setCode(400);			//response.setResultado();			String json = new Gson().toJson(response);			responseHttp.setContentType("application/json");			responseHttp.setCharacterEncoding("UTF-8");			responseHttp.getWriter().write(json);		}*/		modelo.addAttribute("sessionId", InicioController.session.getSessionId());		modelo.addAttribute("carrito", InicioController.obtenerCarritoCompra());		modelo.addAttribute("user", InicioController.session.getUser());		modelo.addAttribute("tipoProducto",InicioController.session.getResponseResultado().getTipoProducto());		modelo.addAttribute("todaCategoria",InicioController.session.getResponseResultado().getTodasCategorias());		modelo.addAttribute("cardId", InicioController.session.getCardId());		modelo.addAttribute("cartObtenido",InicioController.session.responseResultado.getCarrito());		modelo.addAttribute("isLoguin", InicioController.session.isLogin());		modelo.addAttribute("carrito", InicioController.obtenerCarritoCompra());	}	@PostMapping({ "/logout" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET })	@ResponseStatus(HttpStatus.CREATED)	public void logout( Model modelo, HttpServletResponse responseHttp) throws RestClientException, IOException {		ResponseResultado response= new ResponseResultado();		modelo.addAttribute("sessionId", InicioController.session.getSessionId());		modelo.addAttribute("carrito", InicioController.obtenerCarritoCompra());		modelo.addAttribute("user", InicioController.session.getUser());		modelo.addAttribute("tipoProducto",InicioController.session.getResponseResultado().getTipoProducto());		modelo.addAttribute("todaCategoria",InicioController.session.getResponseResultado().getTodasCategorias());		modelo.addAttribute("cardId", InicioController.session.getCardId());		modelo.addAttribute("isLoguin", InicioController.session.isLogin());		String val="";		if (InicioController.session.getToken() != null) {			 val= service.salir(template);			InicioController.session = new Session();			InicioController.session.responseResultado= new ResponseApi();			InicioController.carrito= new ResponseCarritoDetalle();			InicioController.session.setStatusApeturaTerminalUser(false);			response.setCode(200);			String json = new Gson().toJson(response);			responseHttp.setContentType("application/json");			responseHttp.setCharacterEncoding("UTF-8");			responseHttp.getWriter().write(json);					}else {			response.setCode(201);			response.setResultado("");			String json = new Gson().toJson(response);			responseHttp.setContentType("application/json");			responseHttp.setCharacterEncoding("UTF-8");			responseHttp.getWriter().write(json);		}					}			@PostMapping(value = { "create-acount" }, produces = { "application/json" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET, RequestMethod.POST })	@ResponseStatus(HttpStatus.CREATED)	public void crearCuenta(@RequestParam("mail") String mail, @RequestParam("password") String pwd,					 Model modelo, HttpServletResponse responseHttp) throws IOException, InvocationTargetException {								ResponseResultado response = new ResponseResultado();		Logger.getLogger(LoginController.class.getName()).log(Level.SEVERE, (String) mail+pwd, "Login");		if (InicioController.session.getToken() == null) {			response = service.obtenerToken(mail, pwd);			Logger.getLogger(LoginController.class.getName()).log(Level.SEVERE,  ow.writeValueAsString(response));			if (response.isStatus()) {				InicioController.session.setToken(response.getResultado());				ResponseUsuarioShopping usuarioLogin = service.obtenerDatosUsuarioLogin(response.getResultado(), mail);				if (usuarioLogin.isStatus()) {					ResponseDirecciones direccion= service.recuperarDreccionUsuarioPorId(usuarioLogin.getUser().getId(),InicioController.session.getToken());					if(direccion.isStatus()) {						InicioController.session.setDirecciones(new ArrayList<DireccionUsuario>());						InicioController.session.setDirecciones(direccion.getDirecciones() );					}					//busco los datos del carrito si tiene pendiente					ResponseCartUsuario lstResponseCart = servicePara.obtenerCarritoPorUsuario(usuarioLogin.getUser().getId());					if (lstResponseCart.isStatus()) {						for (CarritoDetalle responseCart : lstResponseCart.getCartDetalle()) {							ResponseHistoryEstadoCart state = servicePara.obtenerEstadoCarrito(responseCart.getCart().getIdhistestado());							if (state.isStatus()) {								if (state.getEstado().getIdestado() == 6) {									InicioController.session.responseResultado.setCarrito(responseCart);									InicioController.session.setCardId(responseCart.getCart().getIdcart());									break;								}							}						}					}					InicioController.session.setUser(usuarioLogin.getUser());					usuarioLogin.setResultado(InicioController.session.getToken());					String json = new Gson().toJson(usuarioLogin);					responseHttp.setContentType("application/json");					responseHttp.setCharacterEncoding("UTF-8");					responseHttp.getWriter().write(json);				} else {					usuarioLogin.setResultado("El recurso requerido no est√° disponible.");					String json = new Gson().toJson(usuarioLogin);					responseHttp.setContentType("application/json");					responseHttp.setCharacterEncoding("UTF-8");					responseHttp.getWriter().write(json);				}			} else {				//response.setResultado("El recurso requerido no est√° disponible.");				String json = new Gson().toJson(response);				responseHttp.setContentType("application/json");				responseHttp.setCharacterEncoding("UTF-8");				responseHttp.getWriter().write(json);			}		} else {			InicioController.session = new Session();			response.setCode(400);			//response.setResultado();			String json = new Gson().toJson(response);			responseHttp.setContentType("application/json");			responseHttp.setCharacterEncoding("UTF-8");			responseHttp.getWriter().write(json);		}		modelo.addAttribute("sessionId", InicioController.session.getSessionId());		modelo.addAttribute("carrito", InicioController.obtenerCarritoCompra());		modelo.addAttribute("user", InicioController.session.getUser());		modelo.addAttribute("tipoProducto",InicioController.session.getResponseResultado().getTipoProducto());		modelo.addAttribute("todaCategoria",InicioController.session.getResponseResultado().getTodasCategorias());		modelo.addAttribute("cardId", InicioController.session.getCardId());		modelo.addAttribute("cartObtenido",InicioController.session.responseResultado.getCarrito());		modelo.addAttribute("isLoguin", InicioController.session.isLogin());		modelo.addAttribute("carrito", InicioController.obtenerCarritoCompra());	}				@PostMapping({ "add-new-user" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET, RequestMethod.POST })	@ResponseStatus(HttpStatus.CREATED)	public void addUser(@RequestParam("nombre") String nombre, @RequestParam("apellidos") String apellidos,						  @RequestParam("email") String email, @RequestParam("telefono") String telefono,						  @RequestParam("tipodoc") String tipodoc, @RequestParam("documento") String documento,						  @RequestParam("password") String password,						  Model modelo,HttpServletResponse responseHttp) throws IOException {				ShoppingUsuarios user= new ShoppingUsuarios();		user.setName(nombre.concat(" ").concat(apellidos));		user.setEmail(email);		user.setPhone(telefono);		user.setDocument_type(tipodoc);		user.setDocument(documento);		user.setPassword(password);		user.setId(UUID.randomUUID().toString());				ResponseRegistrarUserShop response = service.crearUsuario(user);		if(response.isStatus()) {			//ENVIO MAIL 			Email confirmar= new Email();			confirmar.setEmail(email);			confirmar.setName(user.getName());			confirmar.setSubject("Confirmar solicitud.");						String mensajeEnvio=  " <HEAD> <STYLE> "					+ " P {color:red;} "					+ " </STYLE> "					+ " </HEAD> "					+ " <BODY> "					+ " Esta es una prueba de <b>envio de correo HTML</b> mediante Java. "					+ " Emplea una clase implementada por mi y con ella esto es tan sencillo como escribir este c√≥digo:" 					+ " <br/> "					+ " <br/> "					+ " <P> "					+ " <br/> "					+ " <font color='green'>// fijar el contenido</font><br/> "					+ " <br/> "					+ " <font color='green'>// enviar CID de una imagen</font><br/> "										+ " <br/> "					+ " <br/> "					+ " <font color='green'>// enviar el correo MULTIPART</font><br/> "					+ " mail.sendMultipart();<br/> "					+ " </P> "					+ " El resultado es el que estais viendo. Si os interesa el tema o quereis ver mas tutoriales. Conectate a... "					+ " <br/> "					+ " <br/>"					+ " <a href=\"http://localhost:8080/confirmation?token="+response.getConfirmar().getToken()+"\">Confirmar</a> "					+ " <br/> "					+ " <br/> "					+ " Saludos, "					+ " <br> "					+ " <img src='cid:cidimage01' /> "					+ " </BODY> "					+ " </HTML> ";			confirmar.setMessage(mensajeEnvio);						ResponseResultado envioMail= service.enviarMailConfirmacion(confirmar);						String json = new Gson().toJson(envioMail);			responseHttp.setContentType("application/json");			responseHttp.setCharacterEncoding("UTF-8");			responseHttp.getWriter().write(json);		}else {			String json = new Gson().toJson(response);			responseHttp.setContentType("application/json");			responseHttp.setCharacterEncoding("UTF-8");			responseHttp.getWriter().write(json);		}				}		@PostMapping({ "delete-acount" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET, RequestMethod.POST })	@ResponseStatus(HttpStatus.CREATED)	public void deleteCuenta(@RequestParam("idUsuario") String id, Model modelo,HttpServletResponse responseHttp) throws IOException {				ResponseResultado response = service.eliminarCuenta(id, InicioController.session.getToken());				    String json = new Gson().toJson(response);			responseHttp.setContentType("application/json");			responseHttp.setCharacterEncoding("UTF-8");			responseHttp.getWriter().write(json);						}}